import { Account, AccountExternal, AccountLinePayload } from './interfaces/accounts.interface';
import { FeeResponse } from './interfaces/fees.interface';
import { FeeStats } from './interfaces/feeStats.interface';
import { Fill, FillResponse } from './interfaces/fills.interface';
import { Order, OrderCreateSide, OrderCreateTimeInForce, OrderCreateType, OrderResponse } from './interfaces/orders.interface';
import { Products } from './interfaces/products.interface';
import { Token } from './interfaces/tokens.interface';
import { Transfer, TransferCreateType, TransferResponse } from './interfaces/transfers.interface';
import { User } from './interfaces/users.interface';
export declare class Trading {
    private common;
    constructor(token: string, sandbox?: boolean);
    getAccounts(): Promise<Account[]>;
    getAccountsExternal(): Promise<AccountExternal[]>;
    getAccount(accountNumber: string): Promise<Account>;
    getAccountLines(accountNumber: string, cursor?: number): Promise<AccountLinePayload>;
    getFees(cursor?: number): Promise<FeeResponse>;
    getFeeStats(): Promise<FeeStats>;
    getFills(productId?: string, oid?: string, cursor?: number): Promise<FillResponse>;
    getFill(tid: string): Promise<Fill>;
    getOrders(cursor?: number): Promise<OrderResponse>;
    getOrdersAll(cursor?: number): Promise<OrderResponse>;
    postOrderCreate(productId: string, side: OrderCreateSide, size: string, price: string, type: OrderCreateType, timeInForce?: OrderCreateTimeInForce): Promise<Order>;
    getOrder(oid: number): Promise<Order>;
    deleteCancelOrder(oid: number): Promise<Order>;
    getProducts(): Promise<Products[]>;
    getProduct(id: string): Promise<Products>;
    getTokens(): Promise<Token[]>;
    postTokenGenerate(name: string): Promise<Token>;
    deleteTokenRevoke(id: string): Promise<Token>;
    getTransfers(cursor?: number): Promise<TransferResponse>;
    postTransfersCreate(type: TransferCreateType, accountNumber: string, counterpartyId: string, amount: string): Promise<Transfer>;
    getUser(): Promise<User>;
    patchUpdateUser(homeCurrencyCode: string): Promise<User>;
}
